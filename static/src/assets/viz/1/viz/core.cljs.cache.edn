{:rename-macros {}, :renames {}, :externs {console {log {}}, document {}}, :use-macros {}, :excludes #{}, :name viz.core, :imports nil, :requires {gstring goog.string, goog.string goog.string, q quil.core, viz.forest viz.forest, grid viz.grid, m quil.middleware, quil.core quil.core, quil.middleware quil.middleware, goog.string.format goog.string.format, viz.ghost viz.ghost, forest viz.forest, viz.grid viz.grid, ghost viz.ghost}, :uses nil, :defs {draw-state {:protocol-inline nil, :meta {:file "/home/mediocregopher/src/viz/src/viz/core.cljs", :line 153, :column 7, :end-line 153, :end-column 17, :arglists (quote ([state]))}, :name viz.core/draw-state, :variadic false, :file "src/viz/core.cljs", :end-column 17, :method-params ([state]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 153, :end-line 153, :max-fixed-arity 1, :fn-var true, :arglists (quote ([state]))}, ghost-expire-roots {:protocol-inline nil, :meta {:file "/home/mediocregopher/src/viz/src/viz/core.cljs", :line 101, :column 8, :end-line 101, :end-column 26, :private true, :arglists (quote ([state]))}, :private true, :name viz.core/ghost-expire-roots, :variadic false, :file "src/viz/core.cljs", :end-column 26, :method-params ([state]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 101, :end-line 101, :max-fixed-arity 1, :fn-var true, :arglists (quote ([state]))}, viz {:protocol-inline nil, :meta {:file "/home/mediocregopher/src/viz/src/viz/core.cljs", :line 191, :column 14, :end-line 191, :end-column 17, :export true, :arglists (quote ([]))}, :name viz.core/viz, :variadic false, :file "src/viz/core.cljs", :end-column 17, :method-params ([]), :protocol-impl nil, :export true, :arglists-meta (nil nil), :column 1, :line 191, :end-line 191, :max-fixed-arity 0, :fn-var true, :arglists (quote ([]))}, update-state {:protocol-inline nil, :meta {:file "/home/mediocregopher/src/viz/src/viz/core.cljs", :line 111, :column 7, :end-line 111, :end-column 19, :arglists (quote ([state]))}, :name viz.core/update-state, :variadic false, :file "src/viz/core.cljs", :end-column 19, :method-params ([state]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 111, :end-line 111, :max-fixed-arity 1, :fn-var true, :arglists (quote ([state]))}, maybe-exit {:protocol-inline nil, :meta {:file "/home/mediocregopher/src/viz/src/viz/core.cljs", :line 105, :column 8, :end-line 105, :end-column 18, :private true, :arglists (quote ([state]))}, :private true, :name viz.core/maybe-exit, :variadic false, :file "src/viz/core.cljs", :end-column 18, :method-params ([state]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 105, :end-line 105, :max-fixed-arity 1, :fn-var true, :arglists (quote ([state]))}, quil-bounds {:protocol-inline nil, :meta {:file "/home/mediocregopher/src/viz/src/viz/core.cljs", :line 91, :column 8, :end-line 91, :end-column 19, :private true, :arglists (quote ([state buffer]))}, :private true, :name viz.core/quil-bounds, :variadic false, :file "src/viz/core.cljs", :end-column 19, :method-params ([state buffer]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 91, :end-line 91, :max-fixed-arity 2, :fn-var true, :arglists (quote ([state buffer]))}, draw-ellipse {:protocol-inline nil, :meta {:file "/home/mediocregopher/src/viz/src/viz/core.cljs", :line 118, :column 8, :end-line 118, :end-column 20, :private true, :arglists (quote ([state pos size]))}, :private true, :name viz.core/draw-ellipse, :variadic false, :file "src/viz/core.cljs", :end-column 20, :method-params ([state pos size]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 118, :end-line 118, :max-fixed-arity 3, :fn-var true, :arglists (quote ([state pos size]))}, spawn-chance {:protocol-inline nil, :meta {:file "/home/mediocregopher/src/viz/src/viz/core.cljs", :line 47, :column 8, :end-line 47, :end-column 20, :private true, :arglists (quote ([state]))}, :private true, :name viz.core/spawn-chance, :variadic false, :file "src/viz/core.cljs", :end-column 20, :method-params ([state]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 47, :end-line 47, :max-fixed-arity 1, :fn-var true, :arglists (quote ([state]))}, window-partial {:protocol-inline nil, :meta {:file "/home/mediocregopher/src/viz/src/viz/core.cljs", :line 17, :column 8, :end-line 17, :end-column 22, :private true, :arglists (quote ([k]))}, :private true, :name viz.core/window-partial, :variadic false, :file "src/viz/core.cljs", :end-column 22, :method-params ([k]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 17, :end-line 17, :max-fixed-arity 1, :fn-var true, :arglists (quote ([k]))}, mk-poss-fn {:protocol-inline nil, :meta {:file "/home/mediocregopher/src/viz/src/viz/core.cljs", :line 71, :column 8, :end-line 71, :end-column 18, :private true, :arglists (quote ([state]))}, :private true, :name viz.core/mk-poss-fn, :variadic false, :file "src/viz/core.cljs", :end-column 18, :method-params ([state]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 71, :end-line 71, :max-fixed-arity 1, :fn-var true, :arglists (quote ([state]))}, new-state {:protocol-inline nil, :meta {:file "/home/mediocregopher/src/viz/src/viz/core.cljs", :line 25, :column 8, :end-line 25, :end-column 17, :private true, :arglists (quote ([]))}, :private true, :name viz.core/new-state, :variadic false, :file "src/viz/core.cljs", :end-column 17, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 25, :end-line 25, :max-fixed-arity 0, :fn-var true, :arglists (quote ([]))}, window-half-size {:name viz.core/window-half-size, :file "src/viz/core.cljs", :line 23, :column 1, :end-line 23, :end-column 22, :meta {:file "/home/mediocregopher/src/viz/src/viz/core.cljs", :line 23, :column 6, :end-line 23, :end-column 22}, :tag any}, window-size {:name viz.core/window-size, :file "src/viz/core.cljs", :line 20, :column 1, :end-line 20, :end-column 17, :meta {:file "/home/mediocregopher/src/viz/src/viz/core.cljs", :line 20, :column 6, :end-line 20, :end-column 17}, :tag cljs.core/IVector}, scale {:protocol-inline nil, :meta {:file "/home/mediocregopher/src/viz/src/viz/core.cljs", :line 80, :column 8, :end-line 80, :end-column 13, :private true, :arglists (quote ([state xy]))}, :private true, :name viz.core/scale, :variadic false, :file "src/viz/core.cljs", :end-column 13, :method-params ([state xy]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 80, :end-line 80, :max-fixed-arity 2, :fn-var true, :arglists (quote ([state xy]))}, in-line? {:protocol-inline nil, :meta {:file "/home/mediocregopher/src/viz/src/viz/core.cljs", :line 123, :column 8, :end-line 123, :end-column 16, :private true, :arglists (quote ([& nodes])), :top-fn {:variadic true, :max-fixed-arity 0, :method-params [(nodes)], :arglists ([& nodes]), :arglists-meta (nil)}}, :private true, :name viz.core/in-line?, :variadic true, :file "src/viz/core.cljs", :end-column 16, :top-fn {:variadic true, :max-fixed-arity 0, :method-params [(nodes)], :arglists ([& nodes]), :arglists-meta (nil)}, :method-params [(nodes)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 123, :end-line 123, :max-fixed-arity 0, :fn-var true, :arglists ([& nodes])}, positive {:protocol-inline nil, :meta {:file "/home/mediocregopher/src/viz/src/viz/core.cljs", :line 45, :column 8, :end-line 45, :end-column 16, :private true, :arglists (quote ([n]))}, :private true, :name viz.core/positive, :variadic false, :file "src/viz/core.cljs", :end-column 16, :method-params ([n]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 45, :end-line 45, :max-fixed-arity 1, :fn-var true, :arglists (quote ([n]))}, debug {:protocol-inline nil, :meta {:file "/home/mediocregopher/src/viz/src/viz/core.cljs", :line 12, :column 8, :end-line 12, :end-column 13, :private true, :arglists (quote ([& args])), :top-fn {:variadic true, :max-fixed-arity 0, :method-params [(args)], :arglists ([& args]), :arglists-meta (nil)}}, :private true, :name viz.core/debug, :variadic true, :file "src/viz/core.cljs", :end-column 13, :top-fn {:variadic true, :max-fixed-arity 0, :method-params [(args)], :arglists ([& args]), :arglists-meta (nil)}, :method-params [(args)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 12, :end-line 12, :max-fixed-arity 0, :fn-var true, :arglists ([& args])}, grid-size {:protocol-inline nil, :meta {:file "/home/mediocregopher/src/viz/src/viz/core.cljs", :line 40, :column 8, :end-line 40, :end-column 17, :private true, :arglists (quote ([state]))}, :private true, :name viz.core/grid-size, :variadic false, :file "src/viz/core.cljs", :end-column 17, :method-params ([state]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 40, :end-line 40, :max-fixed-arity 1, :fn-var true, :arglists (quote ([state]))}, setup {:protocol-inline nil, :meta {:file "/home/mediocregopher/src/viz/src/viz/core.cljs", :line 75, :column 7, :end-line 75, :end-column 12, :arglists (quote ([]))}, :name viz.core/setup, :variadic false, :file "src/viz/core.cljs", :end-column 12, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 75, :end-line 75, :max-fixed-arity 0, :fn-var true, :arglists (quote ([]))}, in-bounds? {:protocol-inline nil, :meta {:file "/home/mediocregopher/src/viz/src/viz/core.cljs", :line 85, :column 8, :end-line 85, :end-column 18, :private true, :arglists (quote ([min-bound max-bound pos]))}, :private true, :name viz.core/in-bounds?, :variadic false, :file "src/viz/core.cljs", :end-column 18, :method-params ([min-bound max-bound pos]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 85, :end-line 85, :max-fixed-arity 3, :fn-var true, :arglists (quote ([min-bound max-bound pos]))}, draw-lines {:protocol-inline nil, :meta {:file "/home/mediocregopher/src/viz/src/viz/core.cljs", :line 127, :column 7, :end-line 127, :end-column 17, :arglists (quote ([state forest parent node]))}, :name viz.core/draw-lines, :variadic false, :file "src/viz/core.cljs", :end-column 17, :method-params ([state forest parent node]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 127, :end-line 127, :max-fixed-arity 4, :fn-var true, :arglists (quote ([state forest parent node]))}, ghost-incr {:protocol-inline nil, :meta {:file "/home/mediocregopher/src/viz/src/viz/core.cljs", :line 95, :column 8, :end-line 95, :end-column 18, :private true, :arglists (quote ([state]))}, :private true, :name viz.core/ghost-incr, :variadic false, :file "src/viz/core.cljs", :end-column 18, :method-params ([state]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 95, :end-line 95, :max-fixed-arity 1, :fn-var true, :arglists (quote ([state]))}, curr-second {:protocol-inline nil, :meta {:file "/home/mediocregopher/src/viz/src/viz/core.cljs", :line 37, :column 8, :end-line 37, :end-column 19, :private true, :arglists (quote ([state]))}, :private true, :name viz.core/curr-second, :variadic false, :file "src/viz/core.cljs", :end-column 19, :method-params ([state]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 37, :end-line 37, :max-fixed-arity 1, :fn-var true, :arglists (quote ([state]))}}, :require-macros {q quil.core, quil.core quil.core}, :cljs.analyzer/constants {:seen #{:features :active-node-ids :grid-width :frame-rate :fn :frame :exit-wait-frames :pos :gif-seconds :update :size :title :tail-length :setup :middleware :host :forest :keep-on-top :host-id :no-start :ghost :draw :child-ids}, :order [:frame-rate :exit-wait-frames :tail-length :frame :gif-seconds :grid-width :ghost :pos :active-node-ids :child-ids :forest :host :features :keep-on-top :update :size :title :setup :middleware :draw :no-start :fn :host-id]}, :doc nil}