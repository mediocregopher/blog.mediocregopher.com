["^ ","~:rename-macros",["^ "],"~:renames",["^ "],"~:externs",["^ ","~$Error",["^ "],"~$Processing",["^ ","~$prototype",["^ ","~$PConstants",["^ "]]]],"~:use-macros",["^ "],"~:excludes",["~#set",[]],"~:name","~$quil.util","~:imports",null,"~:requires",["^ ","~$cstr","~$clojure.string","^?","^?"],"~:cljs.spec/speced-vars",[],"~:uses",null,"~:defs",["^ ","~$clj-compilation?",["^ ","~:protocol-inline",null,"~:meta",["^ ","~:file","/home/mediocregopher/src/viz/out/quil/util.cljc","~:line",71,"~:column",7,"~:end-line",71,"~:end-column",23,"~:arglists",["~#list",["~$quote",["^L",[[]]]]]],"^:","~$quil.util/clj-compilation?","^F","out/quil/util.cljc","^J",23,"~:method-params",["^L",[[]]],"~:protocol-impl",null,"~:arglists-meta",["^L",[null,null]],"^H",1,"~:variadic?",false,"^G",71,"~:ret-tag","~$boolean","^I",71,"~:max-fixed-arity",0,"~:fn-var",true,"^K",["^L",["^M",["^L",[[]]]]]],"~$make-quil-constant-map",["^ ","^D",null,"^E",["^ ","^F","/home/mediocregopher/src/viz/out/quil/util.cljc","^G",98,"^H",7,"^I",98,"^J",29,"^K",["^L",["^M",["^L",[["~$target","~$const-map-name","~$const-map"]]]]]],"^:","~$quil.util/make-quil-constant-map","^F","out/quil/util.cljc","^J",29,"^O",["^L",[["^X","^Y","^Z"]]],"^P",null,"^Q",["^L",[null,null]],"^H",1,"^R",false,"^G",98,"^S","~$any","^I",98,"^U",3,"^V",true,"^K",["^L",["^M",["^L",[["^X","^Y","^Z"]]]]]],"~$print-definition-list",["^ ","^D",null,"^E",["^ ","^F","/home/mediocregopher/src/viz/out/quil/util.cljc","^G",60,"^H",7,"^I",60,"^J",28,"^K",["^L",["^M",["^L",[["~$definitions"]]]]]],"^:","~$quil.util/print-definition-list","^F","out/quil/util.cljc","^J",28,"^O",["^L",[["^12"]]],"^P",null,"^Q",["^L",[null,null]],"^H",1,"^R",false,"^G",60,"^S","^10","^I",60,"^U",1,"^V",true,"^K",["^L",["^M",["^L",[["^12"]]]]]],"~$generate-quil-constants",["^ ","^D",null,"^E",["^ ","^F","/home/mediocregopher/src/viz/out/quil/util.cljc","^G",105,"^H",11,"^I",105,"^J",34,"~:macro",true,"^K",["^L",["^M",["^L",[["^X","~$&","~$opts"]]]]],"~:top-fn",["^ ","^R",true,"^U",1,"^O",["^L",[["^L",["^X","^16"]]]],"^K",["^L",[["^X","~$&","^16"]]],"^Q",["^L",[null]]]],"^:","~$quil.util/generate-quil-constants","^F","out/quil/util.cljc","^J",34,"^17",["^ ","^R",true,"^U",1,"^O",["^L",[["^L",["^X","^16"]]]],"^K",["^L",[["^X","~$&","^16"]]],"^Q",["^L",[null]]],"^O",["^L",[["^L",["^X","^16"]]]],"^P",null,"^Q",["^L",[null]],"^H",1,"^R",true,"^G",105,"^15",true,"^S","^10","^I",105,"^U",1,"^V",false,"^K",["^L",[["^X","~$&","^16"]]]],"~$resolve-constant-key",["^ ","^D",null,"^E",["^ ","^F","/home/mediocregopher/src/viz/out/quil/util.cljc","^G",27,"^H",7,"^I",27,"^J",27,"^K",["^L",["^M",["^L",[["~$key","~$mappings"]]]]],"~:doc","Returns the val associated with key in mappings or key directly if it\n  is one of the vals in mappings. Otherwise throws an exception."],"^:","~$quil.util/resolve-constant-key","^F","out/quil/util.cljc","^J",27,"^O",["^L",[["^1:","^1;"]]],"^P",null,"^Q",["^L",[null,null]],"^H",1,"^R",false,"^G",27,"^S",["^9",[null,"^10"]],"^I",27,"^U",2,"^V",true,"^K",["^L",["^M",["^L",[["^1:","^1;"]]]]],"^1<","Returns the val associated with key in mappings or key directly if it\n  is one of the vals in mappings. Otherwise throws an exception."],"~$no-fn",["^ ","^D",null,"^E",["^ ","^F","/home/mediocregopher/src/viz/out/quil/util.cljc","^G",5,"^H",7,"^I",5,"^J",12,"^K",["^L",["^M",["^L",[[]]]]],"^1<","Function that does nothing."],"^:","~$quil.util/no-fn","^F","out/quil/util.cljc","^J",12,"^O",["^L",[[]]],"^P",null,"^Q",["^L",[null,null]],"^H",1,"^R",false,"^G",5,"^S","~$clj-nil","^I",5,"^U",0,"^V",true,"^K",["^L",["^M",["^L",[[]]]]],"^1<","Function that does nothing."],"~$prepare-quil-clj-constants",["^ ","^D",null,"^E",["^ ","^F","/home/mediocregopher/src/viz/out/quil/util.cljc","^G",86,"^H",7,"^I",86,"^J",33,"^K",["^L",["^M",["^L",[["~$constants"]]]]]],"^:","~$quil.util/prepare-quil-clj-constants","^F","out/quil/util.cljc","^J",33,"^O",["^L",[["^1B"]]],"^P",null,"^Q",["^L",[null,null]],"^H",1,"^R",false,"^G",86,"^S","^10","^I",86,"^U",1,"^V",true,"^K",["^L",["^M",["^L",[["^1B"]]]]]],"~$prepare-quil-cljs-constants",["^ ","^D",null,"^E",["^ ","^F","/home/mediocregopher/src/viz/out/quil/util.cljc","^G",92,"^H",7,"^I",92,"^J",34,"^K",["^L",["^M",["^L",[["^1B"]]]]]],"^:","~$quil.util/prepare-quil-cljs-constants","^F","out/quil/util.cljc","^J",34,"^O",["^L",[["^1B"]]],"^P",null,"^Q",["^L",[null,null]],"^H",1,"^R",false,"^G",92,"^S","^10","^I",92,"^U",1,"^V",true,"^K",["^L",["^M",["^L",[["^1B"]]]]]],"~$length-of-longest-key",["^ ","^D",null,"^E",["^ ","^F","/home/mediocregopher/src/viz/out/quil/util.cljc","^G",39,"^H",8,"^I",39,"^J",29,"~:private",true,"^K",["^L",["^M",["^L",[["~$m"]]]]],"^1<","Returns the length of the longest key of map m. Assumes m's keys are strings\n   and returns 0 if map is empty:\n   (length-of-longest-key {\"foo\" 1 \"barr\" 2 \"bazzz\" 3}) ;=> 5\n   (length-of-longest-key {}) ;=> 0"],"^1G",true,"^:","~$quil.util/length-of-longest-key","^F","out/quil/util.cljc","^J",29,"^O",["^L",[["~$m"]]],"^P",null,"^Q",["^L",[null,null]],"^H",1,"^R",false,"^G",39,"^S",["^9",["^10","~$number","^1@"]],"^I",39,"^U",1,"^V",true,"^K",["^L",["^M",["^L",[["~$m"]]]]],"^1<","Returns the length of the longest key of map m. Assumes m's keys are strings\n   and returns 0 if map is empty:\n   (length-of-longest-key {\"foo\" 1 \"barr\" 2 \"bazzz\" 3}) ;=> 5\n   (length-of-longest-key {}) ;=> 0"],"~$gen-padding",["^ ","^D",null,"^E",["^ ","^F","/home/mediocregopher/src/viz/out/quil/util.cljc","^G",48,"^H",8,"^I",48,"^J",19,"^1G",true,"^K",["^L",["^M",["^L",[["~$len"],["^1K","~$pad"],["~$s","^1K","^1L"]]]]],"^1<","Generates a padding string starting concatting s with len times pad:\n   (gen-padding \"\" 5 \"b\") ;=> \"bbbbb\"\n   May be called without starting string s in which case it defaults to the\n   empty string and also without pad in which case it defaults to a single space","^17",["^ ","^R",false,"^U",3,"^O",["^L",[["^1K"],["^1K","^1L"],["~$s","^1K","^1L"]]],"^K",["^L",[["^1K"],["^1K","^1L"],["~$s","^1K","^1L"]]],"^Q",["^L",[null,null,null]]]],"^1G",true,"^:","~$quil.util/gen-padding","^F","out/quil/util.cljc","^J",19,"^17",["^ ","^R",false,"^U",3,"^O",["^L",[["^1K"],["^1K","^1L"],["~$s","^1K","^1L"]]],"^K",["^L",[["^1K"],["^1K","^1L"],["~$s","^1K","^1L"]]],"^Q",["^L",[null,null,null]]],"^O",["^L",[["^1K"],["^1K","^1L"],["~$s","^1K","^1L"]]],"^P",null,"^Q",["^L",[null,null,null]],"^H",1,"^R",false,"^G",48,"^I",48,"^U",3,"^V",true,"^K",["^L",[["^1K"],["^1K","^1L"],["~$s","^1K","^1L"]]],"^1<","Generates a padding string starting concatting s with len times pad:\n   (gen-padding \"\" 5 \"b\") ;=> \"bbbbb\"\n   May be called without starting string s in which case it defaults to the\n   empty string and also without pad in which case it defaults to a single space"],"~$prepare-quil-name",["^ ","^D",null,"^E",["^ ","^F","/home/mediocregopher/src/viz/out/quil/util.cljc","^G",81,"^H",7,"^I",81,"^J",24,"^K",["^L",["^M",["^L",[["~$const-keyword"]]]]]],"^:","~$quil.util/prepare-quil-name","^F","out/quil/util.cljc","^J",24,"^O",["^L",[["^1O"]]],"^P",null,"^Q",["^L",[null,null]],"^H",1,"^R",false,"^G",81,"^S","^10","^I",81,"^U",1,"^V",true,"^K",["^L",["^M",["^L",[["^1O"]]]]]]],"~:cljs.spec/registry-ref",[],"~:require-macros",null,"~:cljs.analyzer/constants",["^ ","~:seen",["^9",["~:else","~$do","~$js/Processing.prototype.PConstants","~:clj","~$cljs.core/aget","~$def"]],"~:order",["^1U","^1Y","^1W","^1Z","^1X","^1V"]],"^1<","Utility fns"]