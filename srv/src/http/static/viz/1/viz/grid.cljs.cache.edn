{:rename-macros {}, :renames {}, :use-macros {}, :excludes #{}, :name viz.grid, :imports nil, :requires nil, :uses nil, :defs {euclidean {:name viz.grid/euclidean, :file "src/viz/grid.cljs", :line 5, :column 1, :end-line 5, :end-column 15, :meta {:file "/home/mediocregopher/src/viz/src/viz/grid.cljs", :line 5, :column 6, :end-line 5, :end-column 15}, :tag cljs.core/IVector}, isometric {:name viz.grid/isometric, :file "src/viz/grid.cljs", :line 9, :column 1, :end-line 9, :end-column 15, :meta {:file "/home/mediocregopher/src/viz/src/viz/grid.cljs", :line 9, :column 6, :end-line 9, :end-column 15}, :tag cljs.core/IVector}, hexagonal {:name viz.grid/hexagonal, :file "src/viz/grid.cljs", :line 13, :column 1, :end-line 13, :end-column 15, :meta {:file "/home/mediocregopher/src/viz/src/viz/grid.cljs", :line 13, :column 6, :end-line 13, :end-column 15}, :tag cljs.core/IVector}, new-grid {:protocol-inline nil, :meta {:file "/home/mediocregopher/src/viz/src/viz/grid.cljs", :line 17, :column 7, :end-line 17, :end-column 15, :arglists (quote ([grid-def]))}, :name viz.grid/new-grid, :variadic false, :file "src/viz/grid.cljs", :end-column 15, :method-params ([grid-def]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 17, :end-line 17, :max-fixed-arity 1, :fn-var true, :arglists (quote ([grid-def]))}, add-point {:protocol-inline nil, :meta {:file "/home/mediocregopher/src/viz/src/viz/grid.cljs", :line 21, :column 7, :end-line 21, :end-column 16, :arglists (quote ([grid point]))}, :name viz.grid/add-point, :variadic false, :file "src/viz/grid.cljs", :end-column 16, :method-params ([grid point]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 21, :end-line 21, :max-fixed-arity 2, :fn-var true, :arglists (quote ([grid point]))}, my-grid {:name viz.grid/my-grid, :file "src/viz/grid.cljs", :line 24, :column 1, :end-line 24, :end-column 13, :meta {:file "/home/mediocregopher/src/viz/src/viz/grid.cljs", :line 24, :column 6, :end-line 24, :end-column 13}, :tag any}, rm-point {:protocol-inline nil, :meta {:file "/home/mediocregopher/src/viz/src/viz/grid.cljs", :line 51, :column 7, :end-line 51, :end-column 15, :arglists (quote ([grid point]))}, :name viz.grid/rm-point, :variadic false, :file "src/viz/grid.cljs", :end-column 15, :method-params ([grid point]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 51, :end-line 51, :max-fixed-arity 2, :fn-var true, :arglists (quote ([grid point]))}, adjacent-points {:protocol-inline nil, :meta {:file "/home/mediocregopher/src/viz/src/viz/grid.cljs", :line 54, :column 7, :end-line 54, :end-column 22, :arglists (quote ([grid point]))}, :name viz.grid/adjacent-points, :variadic false, :file "src/viz/grid.cljs", :end-column 22, :method-params ([grid point]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 54, :end-line 54, :max-fixed-arity 2, :fn-var true, :arglists (quote ([grid point]))}, empty-adjacent-points {:protocol-inline nil, :meta {:file "/home/mediocregopher/src/viz/src/viz/grid.cljs", :line 57, :column 7, :end-line 57, :end-column 28, :arglists (quote ([grid point]))}, :name viz.grid/empty-adjacent-points, :variadic false, :file "src/viz/grid.cljs", :end-column 28, :method-params ([grid point]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 57, :end-line 57, :max-fixed-arity 2, :fn-var true, :arglists (quote ([grid point]))}}, :require-macros nil, :cljs.analyzer/constants {:seen #{:grid-def :points}, :order [:grid-def :points]}, :doc nil}