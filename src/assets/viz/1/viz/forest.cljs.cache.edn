{:rename-macros {}, :renames {}, :use-macros {}, :excludes #{}, :name viz.forest, :imports nil, :requires nil, :uses nil, :defs {get-node {:protocol-inline nil, :meta {:file "/home/mediocregopher/src/viz/src/viz/forest.cljs", :line 60, :column 7, :end-line 60, :end-column 15, :arglists (quote ([forest id]))}, :name viz.forest/get-node, :variadic false, :file "src/viz/forest.cljs", :end-column 15, :method-params ([forest id]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 60, :end-line 60, :max-fixed-arity 2, :fn-var true, :arglists (quote ([forest id]))}, add-node {:protocol-inline nil, :meta {:file "/home/mediocregopher/src/viz/src/viz/forest.cljs", :line 36, :column 7, :end-line 36, :end-column 15, :arglists (quote ([forest pos]))}, :name viz.forest/add-node, :variadic false, :file "src/viz/forest.cljs", :end-column 15, :method-params ([forest pos]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 36, :end-line 36, :max-fixed-arity 2, :fn-var true, :arglists (quote ([forest pos]))}, set-parent {:protocol-inline nil, :meta {:file "/home/mediocregopher/src/viz/src/viz/forest.cljs", :line 22, :column 8, :end-line 22, :end-column 18, :private true, :arglists (quote ([forest id parent-id]))}, :private true, :name viz.forest/set-parent, :variadic false, :file "src/viz/forest.cljs", :end-column 18, :method-params ([forest id parent-id]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 22, :end-line 22, :max-fixed-arity 3, :fn-var true, :arglists (quote ([forest id parent-id]))}, new-id {:protocol-inline nil, :meta {:file "/home/mediocregopher/src/viz/src/viz/forest.cljs", :line 9, :column 8, :end-line 9, :end-column 14, :private true, :arglists (quote ([forest]))}, :private true, :name viz.forest/new-id, :variadic false, :file "src/viz/forest.cljs", :end-column 14, :method-params ([forest]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 9, :end-line 9, :max-fixed-arity 1, :fn-var true, :arglists (quote ([forest]))}, root? {:protocol-inline nil, :meta {:file "/home/mediocregopher/src/viz/src/viz/forest.cljs", :line 72, :column 7, :end-line 72, :end-column 12, :arglists (quote ([node]))}, :name viz.forest/root?, :variadic false, :file "src/viz/forest.cljs", :end-column 12, :method-params ([node]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 72, :end-line 72, :max-fixed-arity 1, :fn-var true, :arglists (quote ([node]))}, my-forest {:name viz.forest/my-forest, :file "src/viz/forest.cljs", :line 85, :column 1, :end-line 85, :end-column 15, :meta {:file "/home/mediocregopher/src/viz/src/viz/forest.cljs", :line 85, :column 6, :end-line 85, :end-column 15}, :tag any}, new-forest {:protocol-inline nil, :meta {:file "/home/mediocregopher/src/viz/src/viz/forest.cljs", :line 3, :column 7, :end-line 3, :end-column 17, :arglists (quote ([]))}, :name viz.forest/new-forest, :variadic false, :file "src/viz/forest.cljs", :end-column 17, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 3, :end-line 3, :max-fixed-arity 0, :fn-var true, :arglists (quote ([]))}, remove-node {:protocol-inline nil, :meta {:file "/home/mediocregopher/src/viz/src/viz/forest.cljs", :line 46, :column 7, :end-line 46, :end-column 18, :arglists (quote ([forest id]))}, :name viz.forest/remove-node, :variadic false, :file "src/viz/forest.cljs", :end-column 18, :method-params ([forest id]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 46, :end-line 46, :max-fixed-arity 2, :fn-var true, :arglists (quote ([forest id]))}, spawn-child {:protocol-inline nil, :meta {:file "/home/mediocregopher/src/viz/src/viz/forest.cljs", :line 63, :column 7, :end-line 63, :end-column 18, :arglists (quote ([forest parent-id pos]))}, :name viz.forest/spawn-child, :variadic false, :file "src/viz/forest.cljs", :end-column 18, :method-params ([forest parent-id pos]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 63, :end-line 63, :max-fixed-arity 3, :fn-var true, :arglists (quote ([forest parent-id pos]))}, lines {:protocol-inline nil, :meta {:file "/home/mediocregopher/src/viz/src/viz/forest.cljs", :line 77, :column 7, :end-line 77, :end-column 12, :arglists (quote ([forest]))}, :name viz.forest/lines, :variadic false, :file "src/viz/forest.cljs", :end-column 12, :method-params ([forest]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 77, :end-line 77, :max-fixed-arity 1, :fn-var true, :arglists (quote ([forest]))}, unset-parent {:protocol-inline nil, :meta {:file "/home/mediocregopher/src/viz/src/viz/forest.cljs", :line 14, :column 8, :end-line 14, :end-column 20, :private true, :arglists (quote ([forest id parent-id]))}, :private true, :name viz.forest/unset-parent, :variadic false, :file "src/viz/forest.cljs", :end-column 20, :method-params ([forest id parent-id]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 14, :end-line 14, :max-fixed-arity 3, :fn-var true, :arglists (quote ([forest id parent-id]))}, roots {:protocol-inline nil, :meta {:file "/home/mediocregopher/src/viz/src/viz/forest.cljs", :line 71, :column 7, :end-line 71, :end-column 12, :arglists (quote ([forest]))}, :name viz.forest/roots, :variadic false, :file "src/viz/forest.cljs", :end-column 12, :method-params ([forest]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 71, :end-line 71, :max-fixed-arity 1, :fn-var true, :arglists (quote ([forest]))}, leaves {:protocol-inline nil, :meta {:file "/home/mediocregopher/src/viz/src/viz/forest.cljs", :line 74, :column 7, :end-line 74, :end-column 13, :arglists (quote ([forest]))}, :name viz.forest/leaves, :variadic false, :file "src/viz/forest.cljs", :end-column 13, :method-params ([forest]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 74, :end-line 74, :max-fixed-arity 1, :fn-var true, :arglists (quote ([forest]))}, leaf? {:protocol-inline nil, :meta {:file "/home/mediocregopher/src/viz/src/viz/forest.cljs", :line 75, :column 7, :end-line 75, :end-column 12, :arglists (quote ([node]))}, :name viz.forest/leaf?, :variadic false, :file "src/viz/forest.cljs", :end-column 12, :method-params ([node]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 75, :end-line 75, :max-fixed-arity 1, :fn-var true, :arglists (quote ([node]))}}, :require-macros nil, :cljs.analyzer/constants {:seen #{:next-id :parent-pos :pos :roots :leaves :nodes :id :parent-id :child-ids}, :order [:nodes :roots :leaves :next-id :parent-id :parent-pos :child-ids :pos :id]}, :doc nil}